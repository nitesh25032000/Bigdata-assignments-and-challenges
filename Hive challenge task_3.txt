scenario based questions:
1.Will the reducer work or not if you use “Limit 1” in any HiveQL query?
reducer will not work if we use limit 1 0r limit 10 in select clause

2.Suppose I have installed Apache Hive on top of my Hadoop cluster using default metastore configuration. Then, what will happen if we have multiple clients trying to access Hive at the same time? 
The default metastore configuration allows only one Hive session to be opened at a time for accessing the metastore.

3.Suppose, I create a table that contains details of all the transactions done by the customers: CREATE TABLE transaction_details (cust_id INT, amount FLOAT, month STRING, country STRING) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’ ;
Now, after inserting 50,000 records in this table, I want to know the total revenue generated for each month. But, Hive is taking too much time in processing this query. How will you solve this problem and list the steps that I will be taking in order to do so?

I will create a partitioned table for the month and follow the steps given below:
1.Create a partitioned table, say partitioned_transaction:
CREATE TABLE partitioned_transaction (cust_id INT, amount FLOAT, country STRING) PARTITIONED BY (month STRING) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’ ; 

2. Enable dynamic partitioning in Hive:

SET hive.exec.dynamic.partition = true;

SET hive.exec.dynamic.partition.mode = nonstrict;

3. Transfer the data from the non – partitioned table into the newly created partitioned table:

INSERT OVERWRITE TABLE partitioned_transaction PARTITION (month) SELECT cust_id, amount, country, month FROM transaction_details;

Now, if i perform the query using each partition and therefore, decrease the query time. 

4.How can you add a new partition for the month December in the above partitioned table?
ALTER TABLE partitioned_transaction ADD PARTITION (month=’Dec’) LOCATION  ‘/partitioned_transaction’;

5.I am inserting data into a table based on partitions dynamically. But, I received an error – FAILED ERROR IN SEMANTIC ANALYSIS: Dynamic partition strict mode requires at least one static partition column. How will you remove this error?
To remove this error one has to execute following commands:

SET hive.exec.dynamic.partition = true;

SET hive.exec.dynamic.partition.mode = nonstrict;

6.Suppose, I have a CSV file – ‘sample.csv’ present in ‘/temp’ directory with the following entries:
id first_name last_name email gender ip_address
How will you consume this CSV file into the Hive warehouse using built-in SerDe?

SerDe stands for serializer/deserializer. A SerDe allows us to convert the unstructured bytes into a record that we can process using Hive. SerDes are implemented using Java. Hive comes with several built-in SerDes and many other third-party SerDes are also available. 

Hive provides a specific SerDe for working with CSV files. We can use this SerDe for the sample.csv by issuing following commands:

CREATE EXTERNAL TABLE sample

(id int, first_name string, 

last_name string, email string,

gender string, ip_address string) 

ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.OpenCSVSerde’

STORED AS TEXTFILE LOCATION ‘/temp’;

now i can perform query for the table

7.Suppose, I have a lot of small CSV files present in the input directory in HDFS and I want to create a single Hive table corresponding to these files. The data in these files are in the format: {id, name, e-mail, country}. Now, as we know, Hadoop performance degrades when we use lots of small files.
So, how will you solve this problem where we want to create a single Hive table for lots of small files without degrading the performance of the system?

One can use the SequenceFile format which will group these small files together to form a single sequence file. The steps that will be followed in doing so are as follows:

Create a temporary table:
CREATE TABLE temp_table (id INT, name STRING, e-mail STRING, country STRING)
ROW FORMAT FIELDS DELIMITED TERMINATED BY ‘,’ STORED AS TEXTFILE;

Load the data into temp_table:
LOAD DATA INPATH ‘/input’ INTO TABLE temp_table;

Create a table that will store data in SequenceFile format:
CREATE TABLE sample_seqfile (id INT, name STRING, e-mail STRING, country STRING)

ROW FORMAT FIELDS DELIMITED TERMINATED BY ‘,’ STORED AS SEQUENCEFILE;

Transfer the data from the temporary table into the sample_seqfile table:
INSERT OVERWRITE TABLE sample SELECT * FROM temp_table;

Hence, a single SequenceFile is generated which contains the data present in all of the input files and therefore, the problem of having lots of small files is finally eliminated.

8.LOAD DATA LOCAL INPATH ‘Home/country/state/’
OVERWRITE INTO TABLE address;

The following statement failed to execute. What can be the cause?

It is a permission issue so we have to check the hive logs to see which part of the file failed to load into the table

9.Is it possible to add 100 nodes when we already have 100 nodes in Hive? If yes, how

Yes, we can add the nodes by following the below steps:

Step 1: Take a new system; create a new username and password
Step 2: Install SSH and with the master node setup SSH connections
Step 3: Add ssh public_rsa id key to the authorized keys file
Step 4: Add the new DataNode hostname, IP address, and other details in /etc/hosts slaves file:

192.168.1.102 slave3.in slave3
Step 5: Start the DataNode on a new node
Step 6: Login to the new node like suhadoop or:

ssh -X hadoop@192.168.1.103
Step 7: Start HDFS of the newly added slave node by using the following command:
./bin/hadoop-daemon.sh start data node
Step 8: Check the output of the jps command on the new node

Hive Practical questions:

Hive Join operations

Create a  table named CUSTOMERS(ID | NAME | AGE | ADDRESS   | SALARY)
Create a Second  table ORDER(OID | DATE | CUSTOMER_ID | AMOUNT
)

Now perform different joins operations on top of these tables
(Inner JOIN, LEFT OUTER JOIN ,RIGHT OUTER JOIN ,FULL OUTER JOIN)


create table customers
(
id int,
name string,
age int,
address string,
salary int)
row format delimited
fields terminated by ',';


customer.csv

1,nit,22,10/11 bangalore,200000

2,har,22,51 coimbatore,200000

3,shar,24,50 coimbatore,30000

4,nav,25,23 pollachi,40000

5,net,26,25 namakkal,50000


create table order(
oid int,
date string,
customer_id int,
amount int)
row format delimited
fields terminated by ',';

inner join:
select c.id,o.date,o.oid from customers c inner join order o on c.id=o.customer_id;

left join:
select c.id,c.name,c.age,o.oid,o.customer_id  from customers c left join order o on c.id=o.customer_id;

right join:
select o.oid,o.customer_id,c.name  from customers c right join order o on c.id=o.customer_id;

full outer join:
select o.oid,o.customer_id,c.name,c.id  from customers c  full outer join order o on c.id=o.customer_id;

Build a data pipeline with hive:

1.
create table Air_quality(
Date date,
Time string,
CO array<int>,
PT08_S1 int,
NMHC int,
C6H6 array<int>,
PT08_S2 int,
NOx int,
PT08_S3 int,
NO2 int,
PT08_S4 int,
PT08_S5 int,
T array<int>,
RH array<int>,
AH array<int>)
row format serde 'org.apache.hadoop.hive.serde2.OpenCSVSerde'
with serdeproperties (
"separatorChar" = "\;",
"quoteChar" = "\"",
"escapeChar" = "\\"
)
stored as textfile
tblproperties ("skip.header.line.count" = "1");



2.load data local inpath 'file:///home/cloudera/tmp/hive_challenge/AirQualityUCI.csv' into table air_quality;

3.INSERT OVERWRITE LOCAL DIRECTORY '/home/cloudera/tmp/hive_challenge/quality1.csv' 
ROW FORMAT serde  'org.apache.hadoop.hive.serde2.OpenCSVSerde'
select * from air_quality;

4.select * from air_quality;

5.select date,time,T,RH,AH from air_quality  group by date,time,T,RH,AH;

7.select count(*),date from Air_quality group by date;

 

select count(*) total,date from Air_quality group by date having total< 24;

select *  from Air_quality where date = '31/12/2004';

select avg(t[0]) from Air_quality2 where date = '31/12/2004';

select avg(cast(NMHC as int)) from Air_quality;

8.Hive> Create table emp_info(id int,email_id string) row format delimited fields terminated by ','
tblproperties ("skip.header.line.count" = "1");
Hive> load data local inpath'/home/cloudera/hive_Assignment1/emp_info.csv' into table emp_info;
Hive> select id,regexp_extract(email_id,'@(.*)',1) as email_id from emp_info;
Hive> select id,regexp_replace(email_id,'gmail', 'email') as email_id from emp_info;

9.rename table:
hive> alter table Air_quality rename to Air_quality2;

Add column:
hive> Alter table Air_quality add columns(humidity int);

change column name:
hive> Alter table Air_quality change humidity humid int; 

change column datatype:
hive> Alter table Air_quality change humidity humid string;

10.hive> drop table Air_quality;

12.hive> select avg(CO),Date from Air_quality group by Date order by Date;

13.hive> select avg(CO),Date from Air_quality where Date ='10/03/2004'  group by Date;

14.select *  from Air_quality where date = '31/12/2004' sort by t;

15.hive> select distinct date from Air_quality;

16.hive> select T from Air_quality  where time like '18%;

17.Hive> select * from Air_quality where date = '30/03/2005' union all select * from Air_quality where date= '31/03/2005';

18.Hive> create view vw_air_quality as select * from Air_quality2 where date = '31/03/2005';
Hive> select * from vw_air_quality;


